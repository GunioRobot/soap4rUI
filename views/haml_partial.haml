- orig_state = [@parent, @child, @ancestry]
- field = @parent.instance_variable_get(@child)
- field_type = field.class
- field_name = @child
%tr
- #if this is a collection then iterate over the elements/
-if (field_type.ancestors.include?(Array))
  - array = field
  - ancestry = @ancestry + ".#{@child.gsub('@','')}"
  %td
    = "#{field_name.gsub('@','')}"# is an #{field_type} of #{array[0].class} instances"#, parent is #{@parent.class.to_s}"
    - if array.first.minoccurs == 0
      %small [optional]
  %td
    %table
      %tr
        %td
          %input{:type => 'submit', :name => "Submit", :value => "Add", :onclick => "document.getElementById(\"action\").value = \"Add\";document.getElementById(\"element\").value = \"#{ancestry}\";"}
          %input{:type => 'submit', :name => "Submit", :value => "Del", :onclick => "document.getElementById(\"action\").value = \"Del\";document.getElementById(\"element\").value = \"#{ancestry}\";"}
          - array.each_with_index do |@parent, i|
            - @ancestry = ancestry + ".slice(#{i})"
            %table
              -if @parent.class.to_s.include?(@namespace+'::')
                - for @child in @parent.instance_variables
                  = haml :haml_partial
              -else
                %tr
                  %td
                    %input{ :name => "#{@ancestry}", :type => :text, :value => @parent}
                    - if field.minoccurs == 0
                      %small [optional]

- else
  - #if this object is one of our domain's complex types iterate over the instance variables/
  - if (field_type.to_s.include?(@namespace+'::'))
    %td
      = "#{field_name.gsub('@','')}"# is a complexType:#{field_type}"#, parent is #{@parent.class.to_s}"
    - if field.minoccurs == 0
      %small [optional]
    %td
      - if (field_type.ancestors[2]==Enumerable && field_type.ancestors[1]==String)
        %select{ :name => "#{@ancestry}.#{field_name.gsub('@','')}" }
          - for m in (field.class.constants - ['Enumerator'] + [nil])
            - if field == m
              %option{ :selected => "", :value => m }=m
            - elsif field == "" && m == nil
              %option{ :value => m }=m
            - else
              %option{ :value => m }=m
      - else
        %table
          - @parent = field
          - @ancestry += ".#{@child.gsub('@','')}"
          - for @child in @parent.instance_variables
            = haml :haml_partial
  - else
    - #simple types should be text input fields/
    - if !field_name.include?('@minoccurs') && !field_name.include?('@maxoccurs')
      %td
        %pre
          = "#{field_name.gsub('@','')}"# is a simpleType #{field_type}"#, parent is #{@parent.class.to_s}"
      %td
        %input{ :name => "#{@ancestry}.#{field_name.gsub('@','')}", :type => :text, :value => field.to_s}
        - if field.minoccurs == 0
          %small [optional]
- #restore the scope/
- @parent, @child, @ancestry = orig_state